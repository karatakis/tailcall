---
source: tests/core/spec.rs
expression: formatted
---
interface Animal {
  id: ID!
  legs: Int!
  sound: String!
}

interface Bird {
  eggSize: Int!
}

type Boar implements Animal & WildAnimal {
  blackBoar: Boolean!
  dangerous: Boolean!
  id: ID!
  legs: Int!
  sound: String!
}

scalar Bytes

type Cat implements Animal & DomesticAnimal & Pet {
  hasFur: Boolean!
  id: ID!
  legs: Int!
  owner: String!
  sound: String!
  weight: Int!
}

type Chicken implements Animal & Bird {
  eggSize: Int!
  id: ID!
  legs: Int!
  sound: String!
}

type Cow implements Animal & DomesticAnimal {
  canProduceMilk: Boolean!
  id: ID!
  legs: Int!
  sound: String!
  weight: Int!
}

scalar Date

scalar DateTime

type Deer implements Animal & WildAnimal {
  dangerous: Boolean!
  hasAntlers: Boolean!
  id: ID!
  legs: Int!
  sound: String!
}

type Dog implements Animal & DomesticAnimal & Pet {
  id: ID!
  legs: Int!
  owner: String!
  size: Int!
  sound: String!
  weight: Int!
}

interface DomesticAnimal {
  weight: Int!
}

union EdibleAnimals = Boar | Chicken | Pig | Salmon

scalar Email

scalar Empty

interface Fish {
  length: Int!
}

scalar Int128

scalar Int16

scalar Int32

scalar Int64

scalar Int8

scalar JSON

interface Pet {
  owner: String!
}

scalar PhoneNumber

type Pig implements Animal & DomesticAnimal {
  id: ID!
  isForBacon: Boolean!
  legs: Int!
  sound: String!
  weight: Int!
}

type Query {
  allAnimals: [Animal]
  edibleAnimals: [EdibleAnimals]
}

type Salmon implements Animal & Fish {
  id: ID!
  legs: Int!
  length: Int!
  sound: String!
}

scalar UInt128

scalar UInt16

scalar UInt32

scalar UInt64

scalar UInt8

scalar Url

interface WildAnimal {
  dangerous: Boolean!
}

schema {
  query: Query
}
